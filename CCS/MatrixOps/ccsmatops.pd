##-*- Mode: CPerl -*-

##======================================================================
## Header Administrivia
##======================================================================

use PDL::VectorValued::Dev;
require "../Version.pm";
our $VERSION = $PDL::CCS::VERSION;
pp_setversion($VERSION);

##------------------------------------------------------
## pm headers
pp_addpm({At=>'Top'},<<'EOPM');

#use PDL::CCS::Version;
use strict;

=pod

=head1 NAME

PDL::CCS::MatrixOps - Low-level matrix operations for compressed storage sparse PDLs

=head1 SYNOPSIS

 use PDL;
 use PDL::CCS::MatrixOps;

 ##---------------------------------------------------------------------
 ## ... stuff happens

=cut

EOPM
## /pm additions
##------------------------------------------------------

##------------------------------------------------------
## Exports: None
#pp_export_nothing();

##------------------------------------------------------
## Includes / defines
pp_addhdr(<<'EOH');
EOH

##------------------------------------------------------
## index datatype
require "../Config.pm";
our $INDX = $PDL::CCS::Config::ccsConfig{INDX_SIG};
pp_addpm( $PDL::CCS::Config::ccsConfig{INDX_FUNCDEF} );
pp_addhdr( $PDL::CCS::Config::ccsConfig{INDX_TYPEDEF} );


##======================================================================
## C Utilities
##======================================================================
# (none)

##======================================================================
## PDL::PP Wrappers
##======================================================================


##======================================================================
## Operations: matmult2d
##======================================================================

##--------------------------------------------------------------
vvpp_def
  ('ccs_matmult2d_sdd',
   Pars => ("\n    "
	    .join("\n    ",
		  "$INDX ixa(NdimsA,NnzA); nza(NnzA); missinga();", ## a(M,N) (M~i, N~x): formerly here as a(N,M)
		  'b(O,M);',                                      ## b(O,M) (O~z, M~i)
		  'zc(O);',                                       ## zc(O)
		  '[o]c(O,N)',                                    ## c(O,N) (O~z, N~x)
		  '')),
   Code =>
(q(
 //-- initialize: set output to $zc()
 loop (O) %{
   $GENERIC(zc) zc_o = $zc();
   loop (N) %{
     $c() = zc_o;
   %}
 %}
 //
 //-- main loop
 loop (NnzA) %{
   CCS_Indx mi = $ixa(NdimsA=>0);
   CCS_Indx ni = $ixa(NdimsA=>1);
   loop (O) %{
     //--# c(o,n) = sum for m=1 to M [a(m,n) * b(o,m)]
     $c(N=>ni) += $b(M=>mi) * ($nza() - $missinga());
   %}
 %}
)),
  Doc =>
(q{
Two-dimensional matrix multiplication of a sparse index-encoded PDL
$a() with a dense pdl $b(), with output to a dense pdl $c().

The sparse input PDL $a() should be passed here with 0th
dimension "M" and 1st dimension "N", just as for the
built-in PDL::Primitive::matmult().

"Missing" values in $a() are treated as $missinga(), which shouldn't
be BAD or inifinte, but otherwise ought to be handled correctly.
The input pdl $zc() is used to pass the cached contribution of
a $missinga()-row ("M") to an output column ("O"), i.e.

 $zc = ((zeroes($M,1)+$missinga) x $b)->flat;

$SIZE(Ndimsa) is assumed to be 2.
}),
 ); ##--/ccs_matmult2d_sdd


##--------------------------------------------------------------
vvpp_def
  ('ccs_matmult2d_zdd',
   Pars => ("\n    "
	    .join("\n    ",
		  "$INDX ixa(Ndimsa,NnzA); nza(NnzA);", ## a(M,N) (M~i, N~x)
		  'b(O,M);',                          ## b(O,M) (O~z, M~i)
		  '[o]c(O,N)',                        ## c(O,N) (O~z, N~x)
		  '')),
   Code =>
(q(
 //-- initialize output to zero
 loop (N) %{
   loop (O) %{
     $c()=0;
   %}
 %}
 //
 //-- main loop over CCS-encoded a()
 loop (NnzA) %{
   CCS_Indx Mi = $ixa(Ndimsa=>0);
   CCS_Indx Ni = $ixa(Ndimsa=>1);
   loop (O) %{
     $c(N=>Ni) += $nza() * $b(M=>Mi);
   %}
 %}
)),
  Doc =>
(q{
Two-dimensional matrix multiplication of a sparse index-encoded PDL
$a() with a dense pdl $b(), with output to a dense pdl $c().

The sparse input PDL $a() should be passed here with 0th
dimension "M" and 1st dimension "N", just as for the
built-in PDL::Primitive::matmult().

"Missing" values in $a() are treated as zero.
$SIZE(Ndimsa) is assumed to be 2.
}),
 ); ##--/ccs_matmult2d_zdd



##======================================================================
## Footer Administrivia
##======================================================================

##------------------------------------------------------
## pm additions: footer
pp_addpm(<<'EOPM');

##---------------------------------------------------------------------
=pod

=head1 ACKNOWLEDGEMENTS

Perl by Larry Wall.

PDL by Karl Glazebrook, Tuomas J. Lukka, Christian Soeller, and others.

=cut

##----------------------------------------------------------------------
=pod

=head1 KNOWN BUGS

We should really implement matrix multiplication in terms of
inner product, and have a good sparse-matrix only implementation
of the former.

=cut


##---------------------------------------------------------------------
=pod

=head1 AUTHOR

Bryan Jurish E<lt>moocow@cpan.orgE<gt>

=head2 Copyright Policy

All other parts Copyright (C) 2009-2013, Bryan Jurish. All rights reserved.

This package is free software, and entirely without warranty.
You may redistribute it and/or modify it under the same terms
as Perl itself.

=head1 SEE ALSO

perl(1), PDL(3perl)

=cut

EOPM


# Always make sure that you finish your PP declarations with
# pp_done
pp_done();
##----------------------------------------------------------------------
