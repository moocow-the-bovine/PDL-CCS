##-*- Mode: CPerl -*-

##======================================================================
## Header Administrivia
##======================================================================

use PDL::VectorValued::Dev;
my $VERSION = '1.23.29'; ##-- update with perl-reversion from Perl::Version module
pp_setversion($VERSION);

##------------------------------------------------------
## pm headers -> TODO

##------------------------------------------------------
## Exports: None
#pp_export_nothing();

##------------------------------------------------------
## Includes / defines
pp_addhdr(<<'EOH');

#include <math.h>

#ifndef INFINITY
# define INFINITY (1.0/0.0)
#endif

EOH

##------------------------------------------------------
## integer types etc.
require "../Config.pm";

##======================================================================
## C Utilities
##======================================================================
# (none)

##======================================================================
## PDL::PP Wrappers
##======================================================================


##======================================================================
## Operations: Accumulators (Ufuncs)
##======================================================================

##--------------------------------------------------------------
## Operations: Accumulators (Ufuncs): overhaul WIP

## TODOs
##  - [X] use RedoDimsCode for dimension twiddling
##  - [X] drop missing() parameter; pass missing-value in nzvalsIn
##  - [X] add sanity check NnzInPlus1 > NnzIn
##  - [X] rename nzvals* --> vals*
##  - [ ] ? modernize CopyBadStatusCode -> https://github.com/moocow-the-bovine/PDL-CCS/issues/6#issuecomment-1100767227
##  - [ ] re-generalize ccs_accum_def
##  - [ ] update CCS::Nd wrapper methods
##  - [ ] cleanup
vvpp_def(
  'ccs_accum_sum',
  'Pars' => '
    indx ixIn(Ndims,NnzIn);
         valsIn(NvalsIn);
    indx N();
    indx [o]ixOut(Ndims,NvalsOut);
         [o]valsOut(NvalsOut);
    indx [o]nOut();
    ',

  ##-- dimension-twiddling via RedoDimsCode
  ##   + null-detection adapted from PDL_MAYBE_SIZE macro at https://github.com/PDLPorters/pdl-linearalgebra/blob/f789c4100d04ba9d1b50f8c18249bdef29338496/Real/real.pd#L63-L75
  RedoDimsCode => q(
  if ( $SIZE(NvalsIn) <= $SIZE(NnzIn) ) {
    croak("PDL::CCS::Ufunc::ccs_accum_sum: bad input dimension NvalsIn=%ld must be greater than NnzIn=%ld", $SIZE(NvalsIn), $SIZE(NnzIn));
  }
  if ( $PDL(ixOut)->state & $PDL(valsOut)->state & PDL_MYDIMS_TRANS ) {
    /*-- output PDLs passed as null; use default output dimensions --*/
    $SIZE(NvalsOut) = $SIZE(NnzIn);
  }),

  ##-- code
  'Code' => '
 PDL_Indx nnzii_prev=-1, nnzii=0, nnzoi=0;
 PDL_Indx sizeNnzIn=$SIZE(NnzIn), sizeNvalsOut=$SIZE(NvalsOut), nMissing, nMissingInit;
 PDL_Indx ival1,ival2;
 int cmpval, carp_unsorted=0;
 $GENERIC(valsOut) missingOut;
 $GENERIC(valsIn)  missingVal = $valsIn(NvalsIn=>sizeNnzIn);
 
 $GENERIC(valsOut) tmp;
 //
 //-- init
 
 if ($N() > 0) { missingOut = $N() * missingVal; } else { missingOut = missingVal; }
 nMissingInit = $N()-1;
 nMissing     = nMissingInit;
 tmp = $SIZE(NnzIn) == 0 ? 0 : $valsIn(NvalsIn=>0); /* initialize tmp */
 //
 //-- loop
 for (nnzii_prev=0,nnzii=1; nnzii<sizeNnzIn && nnzoi<sizeNvalsOut; nnzii_prev=nnzii++) {
   $CMPVEC(\'$ixIn(NnzIn=>nnzii)\',\'$ixIn(NnzIn=>nnzii_prev)\',\'Ndims\',\'cmpval\',var1=>\'ival1\',var2=>\'ival2\');
   if (cmpval > 0) {
     //-- CASE: ix > ix_prev : insert accumulated value
     if (nMissing > 0) { tmp += nMissing * missingVal; }
     //-- always insert output value
     loop (Ndims) %{ $ixOut(NvalsOut=>nnzoi) = $ixIn(NnzIn=>nnzii_prev); %}
     $valsOut(NvalsOut=>nnzoi) = tmp;
     nnzoi++;
     //
     // ... and reset temps
     tmp = $valsIn(NvalsIn=>nnzii); /* reset tmp */
     nMissing = nMissingInit;
   }
   else if (cmpval <= 0) {
     // CASE: ix >= ix_prev : accumulate to temps
     tmp += $valsIn(NvalsIn=>nnzii);;
     nMissing--;
     if (cmpval < 0) { carp_unsorted=1; } /*-- CASE: ix < ix_prev : GARBAGE (treat as equal) --*/
   }
 }
 //
 //-- sanity check
 if (nnzii<sizeNnzIn) {
   warn("PDL::CCS::Ufunc::ccs_accum_sum(): too few output values provided: some input values were ignored");
 }
 //
 //-- set final computed output values
 if (nMissing > 0) { tmp += nMissing * missingVal; }
 if (nnzii_prev >= 0 && nnzii_prev < $SIZE(NnzIn)) {
   loop (Ndims) %{ $ixOut(NvalsOut=>nnzoi) = $ixIn(NnzIn=>nnzii_prev); %}
 }
 if ($SIZE(NvalsOut) > nnzoi) {
   $valsOut(NvalsOut=>nnzoi) = tmp;
   nnzoi++;
 }
 $nOut() = nnzoi;
 //
 //-- set any remaining output values to 0 (indices) or "N*missing" (values)
 for ( ; nnzoi<sizeNvalsOut; nnzoi++) {
   loop (Ndims) %{ $ixOut(NvalsOut=>nnzoi) = 0; %}
   $valsOut(NvalsOut=>nnzoi) = missingOut;
 }
 //
 //-- carp?
 if (carp_unsorted) {
   warn("PDL::ccs_accum_sum(): unsorted input vector list detected: output will be incorrect");
 }
 //-- END
',

  ##-- pmcode
  'PMCode' => '
 sub PDL::ccs_accum_sum {
   #my ($ixIn,$valsIn, $missing,$N, $ixOut,$valsOut,$nOut) = @_;
   my ($ixIn,$valsIn, $N, $ixOut,$valsOut,$nOut) = @_;

   $nOut //= PDL->null;
   $ixOut //= PDL->null;
   $valsOut //= PDL->null;
   print STDERR "PM-DEBUG: passing ixIn~(", join(" ", $ixIn->dims), ") ; ixOut=$ixOut ; valsOut=$valsOut ; nOut=$nOut\n";

   ##
   ##-- guts
   &PDL::_ccs_accum_sum_int($ixIn,$valsIn, $N, $ixOut,$valsOut,$nOut);
   print STDERR "PM-DEBUG: got nOut=$nOut\n";
   ##
   ##-- auto-trim
   my $trim_slice = "0:".($nOut->max-1);
   $ixOut    = $ixOut->slice(",$trim_slice");
   $valsOut  = $valsOut->slice($trim_slice);
   ##
   ##-- return
   return wantarray ? ($ixOut,$valsOut,$nOut) : $valsOut;
 }
',

  ##-- bad
  'HandleBad' => 1,
  'CopyBadStatusCode' => '
  /* set ixOut badflag */
  if ( $ISPDLSTATEBAD(ixIn) ) {
    $SETPDLSTATEBAD(ixOut);
    PDL->propagate_badflag( ixOut, 1 );
  } else {
    $SETPDLSTATEGOOD(ixOut);
    PDL->propagate_badflag( ixOut, 0 );
  }
  /* set valsOut badflag */
  if ( $ISPDLSTATEBAD(valsIn) ) {
    $SETPDLSTATEBAD(valsOut);
    PDL->propagate_badflag( valsOut, 1 );
  } else {
    $SETPDLSTATEGOOD(valsOut);
    PDL->propagate_badflag( valsOut, 0 );
  }
  ',

);

# Always make sure that you finish your PP declarations with
# pp_done
pp_done();
##----------------------------------------------------------------------
