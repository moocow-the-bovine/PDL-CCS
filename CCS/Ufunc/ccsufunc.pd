##-*- Mode: CPerl -*-

##======================================================================
## Header Administrivia
##======================================================================

use PDL::VectorValued::Dev;
my $VERSION = '1.23.29'; ##-- update with perl-reversion from Perl::Version module
pp_setversion($VERSION);

##------------------------------------------------------
## pm headers -> TODO

##------------------------------------------------------
## Exports: None
#pp_export_nothing();

##------------------------------------------------------
## Includes / defines
pp_addhdr(<<'EOH');

#include <math.h>

#ifndef INFINITY
# define INFINITY (1.0/0.0)
#endif

EOH

##------------------------------------------------------
## integer types etc.
require "../Config.pm";

##======================================================================
## C Utilities
##======================================================================
# (none)

##======================================================================
## PDL::PP Wrappers
##======================================================================


##======================================================================
## Operations: Accumulators (Ufuncs)
##======================================================================

##--------------------------------------------------------------
## Operations: Accumulators (Ufuncs): overhaul WIP
vvpp_def(
  'ccs_accum_sum',
  'Pars' => '
    indx ixIn(Ndims,NnzIn);
    nzvalsIn(NnzIn);
    missing();
    indx N();
    indx [o]ixOut(Ndims,NnzOut);
         [o]nzvalsOut(NnzOut);
    indx [o]nOut();
    ',

  ##-- dimension-twiddling via RedoDimsCode
  ##   + null-detection adapted from PDL_MAYBE_SIZE macro at https://github.com/PDLPorters/pdl-linearalgebra/blob/f789c4100d04ba9d1b50f8c18249bdef29338496/Real/real.pd#L63-L75
  RedoDimsCode => q(
  if ( $PDL(ixOut)->state & $PDL(nzvalsOut)->state & PDL_MYDIMS_TRANS ) {
    /*-- output PDLs passed as null; use default output dimensions --*/
    $SIZE(NnzOut) = $SIZE(NnzIn);
  }),

  ##-- code
  'Code' => '
 PDL_Indx nnzii_prev=-1, nnzii=0, nnzoi=0;
 PDL_Indx sizeNnzIn=$SIZE(NnzIn), sizeNnzOut=$SIZE(NnzOut), nMissing, nMissingInit;
 PDL_Indx ival1,ival2;
 int cmpval, carp_unsorted=0;
 $GENERIC(nzvalsOut) missingOut;
 $GENERIC(missing)   missingVal = $missing();
 
 $GENERIC(nzvalsOut) tmp;
 //
 //-- init
 
 if ($N() > 0) { missingOut = $N() * missingVal; } else { missingOut = missingVal; }
 nMissingInit = $N()-1;
 nMissing     = nMissingInit;
 tmp = $SIZE(NnzIn) == 0 ? 0 : $nzvalsIn(NnzIn=>0); /* initialize tmp */
 //
 //-- loop
 for (nnzii_prev=0,nnzii=1; nnzii<sizeNnzIn && nnzoi<sizeNnzOut; nnzii_prev=nnzii++) {
   $CMPVEC(\'$ixIn(NnzIn=>nnzii)\',\'$ixIn(NnzIn=>nnzii_prev)\',\'Ndims\',\'cmpval\',var1=>\'ival1\',var2=>\'ival2\');
   if (cmpval > 0) {
     //-- CASE: ix > ix_prev : insert accumulated value
     if (nMissing > 0) { tmp += nMissing * missingVal; }
     //-- always insert output value
     loop (Ndims) %{ $ixOut(NnzOut=>nnzoi) = $ixIn(NnzIn=>nnzii_prev); %}
     $nzvalsOut(NnzOut=>nnzoi) = tmp;
     nnzoi++;
     //
     // ... and reset temps
     tmp = $nzvalsIn(NnzIn=>nnzii); /* reset tmp */
     nMissing = nMissingInit;
   }
   else if (cmpval <= 0) {
     // CASE: ix >= ix_prev : accumulate to temps
     tmp += $nzvalsIn(NnzIn=>nnzii);;
     nMissing--;
     if (cmpval < 0) { carp_unsorted=1; } /*-- CASE: ix < ix_prev : GARBAGE (treat as equal) --*/
   }
 }
 //
 //-- sanity check
 if (nnzii<sizeNnzIn) {
   warn("PDL::ccs_accum_sum(): too few output values provided: some input values were ignored");
 }
 //
 //-- set final computed output values
 if (nMissing > 0) { tmp += nMissing * missingVal; }
 if (nnzii_prev >= 0 && nnzii_prev < $SIZE(NnzIn)) {
   loop (Ndims) %{ $ixOut(NnzOut=>nnzoi) = $ixIn(NnzIn=>nnzii_prev); %}
 }
 if ($SIZE(NnzOut) > nnzoi) {
   $nzvalsOut(NnzOut=>nnzoi) = tmp;
   nnzoi++;
 }
 $nOut() = nnzoi;
 //
 //-- set any remaining output values to 0 (indices) or "N*missing" (values)
 for ( ; nnzoi<sizeNnzOut; nnzoi++) {
   loop (Ndims) %{ $ixOut(NnzOut=>nnzoi) = 0; %}
   $nzvalsOut(NnzOut=>nnzoi) = missingOut;
 }
 //
 //-- carp?
 if (carp_unsorted) {
   warn("PDL::ccs_accum_sum(): unsorted input vector list detected: output will be incorrect");
 }
 //-- END
',

  ##-- pmcode
  'PMCode' => '
 sub PDL::ccs_accum_sum {
   my ($ixIn,$nzvalsIn, $missing,$N, $ixOut,$nzvalsOut,$nOut) = @_;

##--WIP: move this logic to RedoDimsCode
if (0) {
   my ($ndims,@nnzIn) = $ixIn->dims;
   my (@nnzOut);
   if (defined($ixOut)) {
     @nnzOut = $ixOut->dims;
     shift(@nnzOut);
   }

   @nnzOut = $nzvalsOut->dims if (!@nnzOut && defined($nzvalsOut) && !$nzvalsOut->isempty);
   @nnzOut = @nnzIn           if (!@nnzOut);
   $ixOut  = PDL->zeroes(indx(), $ndims,@nnzOut)
     if (!defined($ixOut)      || $ixOut->isempty);

   $nzvalsOut = PDL->zeroes(($nzvalsIn->type), @nnzOut)
     if (!defined($nzvalsOut) || $nzvalsOut->isempty);

   #$nOut = PDL->pdl(indx(),0)                  if (!defined($nOut) || $nOut->isempty);
}
##-- NEW
   $nOut //= PDL->null;           # ok
   $ixOut //= PDL->null;
   $nzvalsOut //= PDL->null;
   print STDERR "PM-DEBUG: passing ixIn~(", join(" ", $ixIn->dims), ") ; ixOut=$ixOut ; nzvalsOut=$nzvalsOut ; nOut=$nOut\n";

   ##
   ##-- guts
   &PDL::_ccs_accum_sum_int($ixIn,$nzvalsIn, $missing,$N, $ixOut,$nzvalsOut,$nOut);
   print STDERR "PM-DEBUG: got nOut=$nOut\n";
   ##
   ##-- auto-trim
   $ixOut      = $ixOut->slice(",0:".($nOut->max-1));
   $nzvalsOut  = $nzvalsOut->slice("0:".($nOut->max-1));
   ##
   ##-- return
   return wantarray ? ($ixOut,$nzvalsOut,$nOut) : $nzvalsOut;
 }
',

  ##-- bad
  'HandleBad' => 1,
  'CopyBadStatusCode' => '
  /* set ixOut badflag */
  if ( $ISPDLSTATEBAD(ixIn) ) {
    $SETPDLSTATEBAD(ixOut);
    PDL->propagate_badflag( ixOut, 1 );
  } else {
    $SETPDLSTATEGOOD(ixOut);
    PDL->propagate_badflag( ixOut, 0 );
  }
  /* set nzvalsOut badflag */
  if ( $ISPDLSTATEBAD(nzvalsIn) || $ISPDLSTATEBAD(missing) ) {
    $SETPDLSTATEBAD(nzvalsOut);
    PDL->propagate_badflag( nzvalsOut, 1 );
  } else {
    $SETPDLSTATEGOOD(nzvalsOut);
    PDL->propagate_badflag( nzvalsOut, 0 );
  }
  ',

);

# Always make sure that you finish your PP declarations with
# pp_done
pp_done();
##----------------------------------------------------------------------
