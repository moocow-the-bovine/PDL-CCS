##-*- Mode: CPerl -*-

##======================================================================
## Header Administrivia
##======================================================================

require "../Version.pm";
our $VERSION = $PDL::CCS::VERSION;
pp_setversion($VERSION);

##------------------------------------------------------
## pm headers
pp_addpm({At=>'Top'},<<'EOPM');

#use PDL::CCS::Version;
use strict;

=pod

=head1 NAME

PDL::CCS - Compressed Column- or Row-Storage for 2d PDLs

=head1 SYNOPSIS

 use PDL;
 use PDL::CCS;

 ##-- source pdl
 $a = random($N=8,$M=7);

 ##---------------------------------------------------------------------
 ## Non-missing value counts
 $nnz    = $a->flat->nnz;         ##-- "missing" == 0
 $nnaz   = $a->flat->nnza(1e-6);  ##-- "missing" ~= 0
 #$ngood = $a->ngood;             ##-- "missing" == BAD (see PDL::Bad)

 ##---------------------------------------------------------------------
 ## CCS Encoding
 ($ptr,$rowids,$vals) = ccsencode_nz ($a);             # missing == 0
 ($ptr,$rowids,$vals) = ccsencode_naz($a,$eps);        # missing ~= 0
 ($ptr,$rowids,$vals) = ccsencode_g  ($a);             # missing == BAD
 ($ptr,$rowids,$vals) = ccsencode_i  ($i,$ivals,$N);   # generic flat
 ($ptr,$rowids,$vals) = ccsencode_i2d($xi,$yi,$ivals); # generic 2d

 ##---------------------------------------------------------------------
 ## CCS Decoding
 $cols = ccsdecodecols($ptr,$rowids,$nzvals, $xvals
 $a2   = ccsdecode  ($ptr,$rowids,$vals);         # missing == 0
 $a2   = ccsdecode_g($ptr,$rowids,$vals);         # missing == BAD

 ##---------------------------------------------------------------------
 ## CCS Index Conversion
 $nzi  = ccsitonzi  ($ptr,$rowids, $ix,     $missing); # ix => nzi
 $nzi  = ccsi2dtonzi($ptr,$rowids, $xi,$yi, $missing); # 2d => nzi

 $ix       = ccswhich  ($ptr,$rowids,$vals);           # CCS => ix
 ($xi,$yi) = ccswhichND($ptr,$rowids,$vals);           # CCS => 2d
 $xyi      = ccswhichND($ptr,$rowids,$vals);           # ...as scalar

 ##---------------------------------------------------------------------
 ## CCS Lookup

 $ixvals = ccsget  ($ptr,$rowids,$vals, $ix,$missing);     # ix => values
 $ixvals = ccsget2d($ptr,$rowids,$vals, $xi,$yi,$missing); # 2d => values

 ##---------------------------------------------------------------------
 ## CCS Operations
 ($ptrT,$rowidsT,$valsT) = ccstranspose($ptr,$rowids,$vals); # CCS<->CRS

 ##---------------------------------------------------------------------
 ## Vector Operations, by column
 $nzvals_out = ccsadd_cv ($ptr,$rowids,$nzvals, $colvec);
 $nzvals_out = ccsdiff_cv($ptr,$rowids,$nzvals, $colvec);
 $nzvals_out = ccsmult_cv($ptr,$rowids,$nzvals, $colvec);
 $nzvals_out = ccsdiv_cv ($ptr,$rowids,$nzvals, $colvec);

 ##---------------------------------------------------------------------
 ## Vector Operations, by row
 $nzvals_out = ccsadd_rv ($ptr,$rowids,$nzvals, $rowvec);
 $nzvals_out = ccsdiff_rv($ptr,$rowids,$nzvals, $rowvec);
 $nzvals_out = ccsmult_rv($ptr,$rowids,$nzvals, $rowvec);
 $nzvals_out = ccsdiv_rv ($ptr,$rowids,$nzvals, $rowvec);

 ##---------------------------------------------------------------------
 ## Scalar Operations
 $nzvals_out = $nzvals * 42;  # ... or whatever

 ##---------------------------------------------------------------------
 ## Accumulators
 $rowsumover  = ccssumover ($ptr,$rowids,$nzvals); ##-- like $a->sumover()
 $colsumovert = ccssumovert($ptr,$rowids,$nzvals); ##-- like $a->xchg(0,1)->sumover

=head1 NOTATION



=over 4


=item $a(N,M)

Dense source matrix.  Need not actually exist.


=item column

=item xval

An integer index in the range [0..($N-1)], as returned by $a-E<gt>xvals().
Logically addresses the "N" dimension of $a(N,M).


=item row

=item rowid

=item yval

An integer index in the range [0..($M-1)], as returned by $a-E<gt>yvals().
Logically addresses the "M" dimension of $a(N,M).


=item ix

An integer index in the range [0..($N*$M-1)], as returned by $a-E<gt>flat-E<gt>xvals.
Logically addresses an element of $a(N,M)-E<gt>flat().


=item Nnz

Number of non-"missing" values in $a(N,M).
For zeroes as "missing" values, equivalent to $a-E<gt>which()-E<gt>nelem().


=item xptr(N)

=item ptr(N)

A CCS-encoding component for $a(N,M).
Constructed such that $ptr(0)==0, and
for all $i with 0 < $i < $N,
$ptr($i) contains the number of non-missing values in
the source columns 0..($i-1):

 $pt->at($i) == $a->slice("0:($i-1),")->flat->nnz  ##-- this holds

B<NOTE:> This should be fixed.  It should probably really be the case that:

 $xptr($i) == $a->slice("0:$i,")->flat->nnz        ##-- ... but this doesn't

$ptr(N) values can also be interpreted as indices into
the associated CCS-encoded component vectors $rowids(Nnz) and $nzvals(Nnz).
Here, for all $i, 0 E<lt>= $i E<lt> $N, $ptr($i) contains the
index of the first non-missing value (if any) from column $i of $a(N,M)
encoded in $rowids(Nnz) and $nzvals(Nnz), and $ptr($i+1) contains
the index of the first non-missing value in $rowids() and $nzvals() which
is not drawn from column $i ($ptr($N+1) does not exist, but is implicitly
interpreted as $Nnz-1).


=item nzi

An integer index in the range [0..($Nnz-1)].
Logically adresses a non-"missing" value in $a(N,M).


=item nzvals(Nnz)

Non-missing values encoded from $a(N,M).
The vector $nzvals() stores the actual nonzero values
extracted from $a(), and the vector $rowids() stores the corresponding
row indices: j==$rowids(k) implies $nzvals(k)==$a(i,j),
for 0E<lt>=iE<lt>N, 0E<lt>=kE<lt>Nnz.
The vector $ptr() stores those
indices of $nzvals() which begin a new column:
$ptr(i)E<lt>=kE<lt>$ptr(i+1) implies $nzvals(k)==$a(i,j), for some j.


=item CCS matrix

A CCS-encoded matrix is completely specified by the following properties:

=over 4

=item ($N,$M)

Dimensions of the dense source matrix $a(N,M)

=item $ptr(N)

Pointer to initial Nnz indices for each source column i \in N.

=item $rowids(Nnz)

Row indices of the corresponding non-missing values in $nzvals(Nnz).

=item $nzvals(Nnz)

Non-missing values.

=back

See L<EXAMPLES> below for an example.

=back

=cut

EOPM
## /pm additions
##------------------------------------------------------

##------------------------------------------------------
## Exports: None
pp_export_nothing();

##------------------------------------------------------
## Includes / defines
pp_addhdr(<<'EOH');
EOH


##======================================================================
## C Utilities
##======================================================================
# (none)


##======================================================================
## PDL::PP Wrappers
##======================================================================

##======================================================================
## Basic Utilities
#pp_addpm(<<'EOPM');
#=pod
#
#=head1 Basic Utilities
#
#=cut
#EOPM

##======================================================================
## Non-missing Value Counts
##======================================================================

# now in PDL::CCS::ccsutils

##======================================================================
## Encoding
##======================================================================

# guts are in PDL::CCS::ccsutils::ccs_encode_pointer()

##======================================================================
## Decoding
##======================================================================

# now in ::Compat

##======================================================================
## Index Conversion
##======================================================================

##-- done

##======================================================================
## Lookup
##======================================================================

##-- done



##======================================================================
## Operations
##======================================================================

##------------------------------------------------------
## ccstranspose() : transposition (convenience)

##-- done



##------------------------------------------------------
## vector operations, by row

sub _vectorop_colvec {
  my ($name, $op, $longname) = @_;

  pp_def
    ("ccs${name}_cv",
     Pars    => 'int ptr(N); int rowids(Nnz); nzvals_in(Nnz);  colvec(M);  [o]nzvals_out(Nnz)',
     Inplace => ['nzvals_in'],
     Code    =>
qq(//
 long ni, nzi, nzi_max;
 for (ni=0, nzi=0; ni < \$SIZE(N); ni++) {
   long ni_next = ni+1;
   if (ni_next != \$SIZE(N)) { nzi_max = \$ptr(N=>ni_next); }
   else                      { nzi_max = \$SIZE(Nnz);       }
   for (; nzi < nzi_max; nzi++) {
     long mi = \$rowids(Nnz=>nzi);
     \$nzvals_out(Nnz=>nzi) = \$nzvals_in(Nnz=>nzi) ${op} \$colvec(M=>mi);
   }
 }
),
     Doc =>
qq(Column vector ${longname} on CCS-encoded PDL.
Should do something like the following (without decoding the CCS matrix):

 (\$row $op ccsdecode(\$ptr,\$rowids,\$nzvals))->ccsencode;

Missing values in the CCS-encoded PDL are not effected by this operation.
),
    );
}

my @vectorops = (
		 ["mult",  '*',  'multiplication'],
		 ["div",   '/',  'division'],
		 ["add",   '+',  'addition'],
		 ["diff",  '-',  'subtraction'],
		);
foreach $vop (@vectorops) { _vectorop_rowvec(@$vop); }



##------------------------------------------------------
## vector operations: row-vectors

sub _vectorop_rowvec {
  my ($name, $op, $longname) = @_;

  pp_def
    ("ccs${name}_rv",
     Pars    => 'int ptr(N); int rowids(Nnz); nzvals_in(Nnz);  rowvec(N);  [o]nzvals_out(Nnz)',
     Inplace => ['nzvals_in'],
     Code    =>
qq(
 long ni, nzi, nzi_max;
 for (ni=0, nzi=0; ni < \$SIZE(N); ni++) {
   long ni_next = ni+1;
   if (ni_next != \$SIZE(N)) { nzi_max = \$ptr(N=>ni_next); }
   else                      { nzi_max = \$SIZE(Nnz);       }
   for (; nzi < nzi_max; nzi++) {
     \$nzvals_out(Nnz=>nzi) = \$nzvals_in(Nnz=>nzi) ${op} \$rowvec(N=>ni);
   }
 }
),
     Doc =>
'Row-vector '.${longname}.' on CCS-encoded PDL.
Should do something like the following (without decoding the CCS matrix):

 ($column->slice("*1,") '.$op.' ccsdecode($ptr,$rowids,$nzvals))->ccsencode;

Missing values in the CCS-encoded PDL are not effected by this operation.
',
    );
}

foreach $vop (@vectorops) { _vectorop_colvec(@$vop); }


##------------------------------------------------------
## Ufuncs (accumulators)

sub _ccs_ufunc_op {
  my ($name, $op, $initval, $longname) = @_;

  ##-------------------------
  ## Ufunc: by row: wrapper
  pp_add_exported('',"ccs${name}over");
  pp_addpm(<<"EOPM");

=pod

=head2 ccs${name}over

=for sig

  Signature: (int ptr(N); int rowids(Nnz); nzvals(Nnz); \$M; [o]rowvals(M))

Row-wise accumulated ${longname} on a CCS encoded matrix.
You can specify either \$M or rowvals() or neither, in which case
the number of rows will be guessed from \$rowids().

=cut

sub ccs${name}over {
  my (\$M,\$vals) = \@_[3,4];
  \$M    = \$_[1]->max+1 if (!defined(\$M));
  \$vals = \$M if (!defined(\$vals) && UNIVERSAL::isa(\$M,'PDL'));
  \$vals = zeroes(\$_[2]->type, \$M) if (!defined(\$vals));
  _ccs${name}over(\@_[0..2],\$vals);
  return \$vals;
}

EOPM
;

  ##-------------------------
  ## Ufunc: by row: low-level
  pp_def
    ("_ccs${name}over",
     Pars    => 'int ptr(N); int rowids(Nnz); nzvals(Nnz);  [o]rowvals(M)',
     Code    =>
qq(//
 long nzi;
 loop (M) %{ \$rowvals() = $initval; %}
 loop (Nnz) %{
   long rowid = \$rowids();
   \$rowvals(M=>rowid) ${op}= \$nzvals();
 %}
),
     Doc =>
qq(Low-level row-wise accumulated ${longname} on a CCS encoded matrix.),
    );

  ##-------------------------
  ## Ufunc: by column
  pp_def
    ("ccs${name}overt",
     Pars    => 'int ptr(N); int rowids(Nnz); nzvals(Nnz);  [o]colvals(N)',
     Code    =>
qq(//
 long coli, coli_next;
 long nzi, nzi_max;
 \$GENERIC(colvals) colval;
 for (coli=0, nzi=0; coli < \$SIZE(N); coli++) {
   colval    = $initval;
   coli_next = coli+1;
   if (coli_next < \$SIZE(N)) { nzi_max = \$ptr(N=>coli_next); }
   else                       { nzi_max = \$SIZE(Nnz);       }
   for (; nzi < nzi_max; nzi++) {
     colval ${op}= \$nzvals(Nnz=>nzi);
   }
   \$colvals(N=>coli) = colval;
 }
),
     Doc =>
qq(Column-wise accumulated ${longname} on a CCS encoded matrix.),
    );
}

my @ufuncs =
  (
   ["sum" , "+", "0", "sum"],
   #["prod", "*", "1", "product"], ##-- no: doesn't account for missing values (bashed to zero)
  );

foreach $uop (@ufuncs) { _ccs_ufunc_op(@$uop); }


##------------------------------------------------------
## scalar operations

pp_addpm(<<'EOPM');

=pod

=head2 $nzvals(Nnz) * $c();

=head2 $nzvals(Nnz) / $c();

=head2 $nzvals(Nnz) + $c();

=head2 $nzvals(Nnz) - $c();

=head2 log($nzvals(Nnz))

=head2 exp($nzvals(Nnz))

=head2 ...

Scalar operations which do not cause any previously "missing" values to
be instantiated can be called directly on $nzvals().

=cut

EOPM


##------------------------------------------------------
## TODO: I/O (SVDLIBC-style)





##======================================================================
## Footer Administrivia
##======================================================================

##------------------------------------------------------
## pm additions
pp_addpm(<<'EOPM');

##---------------------------------------------------------------------
=pod

=head1 EXAMPLES

=head2 Compressed Column Format Example

 $a = pdl([
	   [10, 0, 0, 0,-2,  0],
	   [3,  9, 0, 0, 0,  3],
	   [0,  7, 8, 7, 0,  0],
	   [3,  0, 8, 7, 5,  0],
	   [0,  8, 0, 9, 9, 13],
	   [0,  4, 0, 0, 2, -1]
	  ]);

 ($ptr,$rowids,$nzvals) = ccsencode($a);

 print join("\n", "ptr=$ptr", "rowids=$rowids", "nzvals=$nzvals");

... prints something like:

 ptr=[0 3 7 9 12 16]
 rowids=[ 0 1 3 1 2 4 5 2 3 2 3 4  0 3 4 5 1  4  5]
 nzvals=[10 3 3 9 7 8 4 8 8 7 7 9 -2 5 9 2 3 13 -1]


=head2 Sparse Matrix Example

 ##-- create a random sparse matrix
 $a  = random(100,100);
 $a *= ($a>.9);

 ##-- encode it
 ($ptr,$rowids,$nzvals) = ccsencode($a);

 ##-- what did we save?
 sub pdlsize { return PDL::howbig($_[0]->type)*$_[0]->nelem; }
 print "Encoding saves us ",
       ($saved = pdlsize($a) - pdlsize($ptr) - pdlsize($rowids) - pdlsize($nzvals)),
       " bytes (", (100.0*$saved/pdlsize($a)), "%)\n";

... prints something like:

 Encoding saves us 71416 bytes (89.27%)


=head2 Decoding Example

 ##-- random matrix
 $a = random(100,100);

 ##-- make an expensive copy of $a by encoding & decoding
 ($ptr,$rowids,$nzvals) = ccsencode($a);
 $a2 = ccsdecode($ptr,$rowids,$nzvals);

 ##-- ...and make sure it's good
 print all($a==$a2) ? "Decoding is good!\n" : "Nasty icky bug!\n";

=cut

##---------------------------------------------------------------------
=pod

=head1 ACKNOWLEDGEMENTS

Perl by Larry Wall.

PDL by Karl Glazebrook, Tuomas J. Lukka, Christian Soeller, and others.

Inspiration and algorithms from the SVDLIBC C library by Douglas Rohde;
which is itself based on SVDPACKC
by Michael Berry, Theresa Do, Gavin O'Brien, Vijay Krishna and Sowmini Varadhan.

=cut

##----------------------------------------------------------------------
=pod

=head1 KNOWN BUGS

Probably many.

=cut


##---------------------------------------------------------------------
=pod

=head1 AUTHOR

Bryan Jurish E<lt>moocow@ling.uni-potsdam.deE<gt>

=head2 Copyright Policy

Copyright (C) 2005-2007, Bryan Jurish. All rights reserved.

This package is free software, and entirely without warranty.
You may redistribute it and/or modify it under the same terms
as Perl itself.

=head1 SEE ALSO

perl(1), PDL(3perl), PDL::SVDLIBC(3perl),

SVDLIBC: http://tedlab.mit.edu/~dr/SVDLIBC/

SVDPACKC: http://www.netlib.org/svdpack/

=cut

EOPM


# Always make sure that you finish your PP declarations with
# pp_done
pp_done();
##----------------------------------------------------------------------
